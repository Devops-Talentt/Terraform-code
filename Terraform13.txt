 
TERRAFORM CODE TO CREATE AWS ARCHITECTURE : 
=========================================


terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.0"
    }
  }
}

# Configure the AWS Provider
provider "aws" {
  region = "ap-northeast-1"
}



locals {
   tags = { 
      "project" = "devops13"
	  "purpose" = "tf-testing"
	}
}	
	  
	  
	  
	  
resource "aws_vpc" "devops-vpc" {
  cidr_block       = "192.0.0.0/26"
  instance_tenancy = "default"

  tags = merge (local.tags,
      {
       Name = "devops13-tf-vpc"
      })
} 



resource "aws_internet_gateway" "devops-igw" {

  tags = merge (local.tags,
      {
       Name = "devops13-tf-igw"
      })
}

resource "aws_internet_gateway_attachment" "devops-igw-attach" {
  internet_gateway_id = aws_internet_gateway.devops-igw.id
  vpc_id              = aws_vpc.devops-vpc.id
}


resource "aws_subnet" "devops-pub-sub" {
  vpc_id     = aws_vpc.devops-vpc.id
  cidr_block = "192.0.0.0/28"
  enable_resource_name_dns_a_record_on_launch = true
  map_public_ip_on_launch = true

  tags = merge (local.tags,
       {
         Name = "devops13-tf-pub-sub"
       })
}



resource "aws_subnet" "devops-pvt-sub" {
  vpc_id     = aws_vpc.devops-vpc.id
  cidr_block = "192.0.0.16/28"
  enable_resource_name_dns_a_record_on_launch = true

  tags = merge (local.tags,
       {
         Name = "devops13-tf-pvt-sub"
       })
}




resource "aws_subnet" "devops-pub-sub-1" {
  vpc_id     = aws_vpc.devops-vpc.id
  cidr_block = "192.0.0.32/28"
  enable_resource_name_dns_a_record_on_launch = true
  map_public_ip_on_launch = true

  tags = merge (local.tags,
       {
         Name = "devops13-tf-pub-sub-1"
       })
}




resource "aws_route_table" "devops-pub-rt" {
  vpc_id = aws_vpc.devops-vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.devops-igw.id
  }
  tags = merge (local.tags,
       {
         Name = "devops13-tf-pub-rt"
       })
}	   
	   
	   
	   
resource "aws_route_table" "devops-pvt-rt" {
  vpc_id = aws_vpc.devops-vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_nat_gateway.devops-ngw.id
  }
  tags = merge (local.tags,
       {
         Name = "devops13-tf-pvt-rt"
       })
}	


resource "aws_nat_gateway" "devops-ngw" {
  allocation_id = aws_eip.nat-eip.id
  subnet_id     = aws_subnet.devops-pub-sub.id

  tags = merge (local.tags,
       {
         Name = "devops13-tf-ngw"
       })

  # To ensure proper ordering, it is recommended to add an explicit dependency
  # on the Internet Gateway for the VPC.
  depends_on = [aws_internet_gateway.devops-igw]
}   

resource "aws_eip" "nat-eip" {
  vpc      = true
}




resource "aws_route_table_association" "devops-pub-rt-asc" {
  subnet_id      = aws_subnet.devops-pub-sub.id
  route_table_id = aws_route_table.devops-pub-rt.id
}


resource "aws_route_table_association" "devops-pvt-rt-asc" {
  subnet_id      = aws_subnet.devops-pvt-sub.id
  route_table_id = aws_route_table.devops-pvt-rt.id
}



resource "aws_security_group" "devops-sg" {
  name        = "devops13-sg"
  description = "allowing http port"
  vpc_id      = aws_vpc.devops-vpc.id

  ingress {
    description      = "http port"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = [aws_vpc.devops-vpc.cidr_block]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  tags = merge (local.tags,
       {
         Name = "devops13-tf-sg"
       })
}


variable "ami-id" {
    type = string
	default = "ami-078296f82eb463377"
}	
	
	

resource "aws_instance" "ec2-instance" {
  ami           = var.ami-id
  instance_type = "t2.micro"
  vpc_security_group_ids = [aws_security_group.devops-sg.id]
  subnet_id = aws_subnet.devops-pub-sub.id
  user_data = file("user.sh")
  tags = merge (local.tags,
       {
         Name = "devops13-tf-ec2-instance"
       })
}



resource "aws_instance" "ec2-pvt" {
  ami           = var.ami-id
  instance_type = "t2.micro"
  vpc_security_group_ids = [aws_security_group.devops-sg.id]
  subnet_id = aws_subnet.devops-pvt-sub.id
  tags = merge (local.tags,
       {
         Name = "devops13-tf-ec2-pvt"
       })
}




resource "aws_lb_target_group" "devops-tg" {
  name     = "devops-lb-tg"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.devops-vpc.id
  health_check {
    path                = "/home.html"
    port                = 80
    healthy_threshold   = 3
    unhealthy_threshold = 2
    timeout             = 2
    interval            = 5
    matcher             = "404" # has to be HTTP 404 or fails
  }
}


user.sh

#!/bin/bash
sudo yum install -y httpd
sudo systemctl enable httpd
sudo systemctl start httpd



#!/bin/bash
sudo amazon-linux-extras install nginx1
sudo systemctl enable nginx
sudo systemctl start nginx




resource "aws_lb" "devops-app-lb" {
  name               = "devops13-app-lb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.devops-sg.id]
  subnets            = [aws_subnet.devops-pub-sub.id , aws_subnet.devops-pub-sub-1.id]

  enable_deletion_protection = false
  tags = merge (local.tags,
       {
         Name = "devops13-tf-app-lb"
       })
}

resource "aws_lb_target_group_attachment" "devops-lb-tg-att" {
  target_group_arn = aws_lb_target_group.devops-tg.arn
  target_id        = aws_instance.ec2-instance.id
  port             = 80
}



resource "aws_lb_listener" "devops-alb-lis" {
  default_action {
    target_group_arn = aws_lb_target_group.devops-tg.arn
    type             = "forward"
  }
  load_balancer_arn = aws_lb.devops-app-lb.arn
  port              = 80
  protocol          = "HTTP"
}
